image:                                node:10

pipelines:
  default:
    - step:
        caches:
          - node
        name:                          "Build and Test"
        script:
          - echo "Build, Test and Upload"
          - apt-get update
          - apt-get install jq
          - npm install
          - declare -x VERSION=$(jq -r '.version' package.json)
          - echo $VERSION
          - npm run-script test:unit
          - npm run-script lint
  branches:
    master:
      - step:
          caches:
          - node
          name:                        "Build, Test and Upload"
          script:
            # PACKAGE INSTALLATIONS
            - echo "Build, Test and Upload"
            - apt-get update
            - apt-get install jq zip -y
            - npm install
            - npm run-script test:unit
            - npm run-script build
            # Push back update to git
            - git config remote.origin.url https://$bitbucket_id:$bitbucket_token@bitbucket.org/project-alkemi/liquidity-reserve-dashboard.git
            - git init
            - git config user.name "$USERNAME"
            - git config user.email "ryan@alkemi.ai" # Need to change this ti Build CI user
            - git add package.json
            - git commit -m "[skip CI]" # Required to avoid re-running this CI upon git push
            - git push
            - declare -x VERSION=$(jq -r '.version' package.json)
            - echo $VERSION
            - git tag $VERSION
            - git remote -v
            - git push origin --tags
            - zip -r application.zip .
            - pipe:                    atlassian/aws-elasticbeanstalk-deploy:0.5.5
              variables:
                AWS_ACCESS_KEY_ID:     $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION:    $AWS_DEFAULT_REGION
                APPLICATION_NAME:      '$APPLICATION_NAME'
                COMMAND:               'upload-only'
                ZIP_FILE:              'application.zip'
                VERSION_LABEL:         '$APPLICATION_NAME-$VERSION'
      - step:
          name:                        "Deploy to Staging"
          deployment:                  staging
          script:
          - echo "$VERSION Deployment to Staging!"
          - apt-get update
          - apt-get install jq -y
          - declare -x VERSION=$(jq -r '.version' package.json)
          - pipe:                      atlassian/aws-elasticbeanstalk-deploy:0.5.5
            variables:
              AWS_ACCESS_KEY_ID:       $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY:   $AWS_SECRET_ACCESS_KEY
              AWS_DEFAULT_REGION:      $AWS_DEFAULT_REGION
              APPLICATION_NAME:        '$APPLICATION_NAME'
              COMMAND:                 'deploy-only'
              VERSION_LABEL:           '$APPLICATION_NAME-$VERSION'
              ENVIRONMENT_NAME:        '$APPLICATION_NAME-staging'
              WAIT:                    'true'
      - step:
          name:                        "Deploy to Production"
          deployment:                  production
          trigger:                     manual
          script:
            - echo "Deployment to Production!"
            - apt-get update
            - apt-get install jq -y
            - declare -x VERSION=$(jq -r '.version' package.json)
            - pipe:                    atlassian/aws-elasticbeanstalk-deploy:0.5.5
              variables:
                AWS_ACCESS_KEY_ID:     $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION:    $AWS_DEFAULT_REGION
                APPLICATION_NAME:      '$APPLICATION_NAME'
                COMMAND:               'deploy-only'
                VERSION_LABEL:         '$APPLICATION_NAME-$VERSION'
                ENVIRONMENT_NAME:      '$APPLICATION_NAME-production'
                WAIT:                  'true'
